function [aerodynamic_force_B__N, aerodynamic_torque_B__Nm] ...
            = execute(attitude_quaternion_BI, ...
                        angular_velocity_BI_B__rad_per_s, ...
                        velocity_I_I__m_per_s, ...
                        wind_velocity_I_I__m_per_s, ...
                        atmosphere_mass_density__kg_per_m3, ...
                        atmosphere_number_density__1_per_m3, ...
                        atmosphere_temperature__K, ...
                        bodies_rotation_angles__rad, ...
                        ParametersSimplifiedVleoAerodynamics)
% execute - Calculate the aerodynamic force and torque in the body frame
%
%   [aerodynamic_force_B__N, aerodynamic_torque_B__Nm] ...
%       = execute(attitude_quaternion_BI, ...
%                 angular_velocity_BI_B__rad_per_s, ...
%                 velocity_I_I__m_per_s, ...
%                 wind_velocity_I_I__m_per_s, ...
%                 atmosphere_mass_density__kg_per_m3, ...
%                 atmosphere_number_density__1_per_m3, ...
%                 atmosphere_temperature__K, ...
%                 bodies_rotation_angles__rad, ...
%                 ParametersSimplifiedVleoAerodynamics)
%
%   Inputs:
%   attitude_quaternion_BI: 4x1 quaternion of body frame attitude
%   angular_velocity_BI_B__rad_per_s: 3x1 vector of body frame angular velocity
%   velocity_I_I__m_per_s: 3x1 vector of velocity in inertial frame
%   wind_velocity_I_I__m_per_s: 3x1 vector of wind velocity in inertial frame
%   atmosphere_mass_density__kg_per_m3: Mass density of atmosphere in kg/m^3
%   atmosphere_number_density__1_per_m3: Number density of atmosphere in 1/m^3
%   atmosphere_temperature__K: Temperature of atmosphere in K
%   bodies_rotation_angles__rad: 1xN matrix of rotation angles of bodies in body frame
%   ParametersSimplifiedVleoAerodynamics: Parameters of the SimplifiedVleoAerodynamics model
%
%   Outputs:
%   aerodynamic_force_B__N: 3x1 vector of aerodynamic force in body frame
%   aerodynamic_torque_B__Nm: 3x1 vector of aerodynamic torque in body frame
%

%% Abbreviations
Param = ParametersSimplifiedVleoAerodynamics;
rho = atmosphere_mass_density__kg_per_m3;
n = atmosphere_number_density__1_per_m3;

%% Prepare inputs to model
mean_particle_mass__kg = rho / n;
bodies = Param.bodies;
temperature_ratio_method = Param.temperature_ratio_method;

%% Call model from external namespace
[aerodynamic_force_B__N, aerodynamic_torque_B__Nm] ...
    = vleo_aerodynamics_core.vleoAerodynamics(attitude_quaternion_BI, ...
                                                angular_velocity_BI_B__rad_per_s, ...
                                                velocity_I_I__m_per_s, ...
                                                wind_velocity_I_I__m_per_s, ...
                                                atmosphere_mass_density__kg_per_m3, ...
                                                atmosphere_temperature__K, ...
                                                mean_particle_mass__kg, ...
                                                bodies, ...
                                                bodies_rotation_angles__rad, ...
                                                temperature_ratio_method);

end