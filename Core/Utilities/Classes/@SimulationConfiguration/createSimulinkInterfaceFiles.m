function createSimulinkInterfaceFiles(obj)

    % Get the folder of the interface files
    project = currentProject;
    root_folder = project.RootFolder;
    interface_folder = fullfile(root_folder, "AutoGenerated", "+SimulinkInterfaces");

    % Create the folder if it does not exist
    if ~isfolder(interface_folder)
        mkdir(interface_folder);
    end

    % Get the class name
    class_name = class(obj);

    %% Create the Simulink Interface Files
    disclaimer = "%% This file was automatically generated by the createSimulinkInterfaces method of the SimulationConfiguration class.\n%% Changes to this file may cause unexpected behavior and will be overwritten.\n\n";
    
    for model_function_name = obj.interface_function_names

        %% Create the file of the interface function
        % Get the number of inputs and outputs of the model method
        method_name = append(class_name, ".", model_function_name);
        num_inputs = nargin(method_name);
        num_outputs = nargout(method_name);

        % Create dummy names for input and output arguments
        if num_inputs > 0
            input_names = arrayfun(@(i) sprintf("in%d", i), 1:num_inputs);
            inputs = strjoin(input_names, ", ");
        else
            inputs = "";
        end

        if num_outputs > 0
            output_names = arrayfun(@(i) sprintf("out%d", i), 1:num_outputs);
            outputs = strjoin(output_names, ", ");
        else
            outputs = "";
        end

        % Create the file
        interface_function_name  = model_function_name;
        interface_function_file = fullfile(interface_folder, append(interface_function_name, ".m"));
        interface_function_content = sprintf(append(disclaimer, "function [%s] = %s(%s)\n    [%s] = %s(%s);\nend"), ...
                                                outputs, ...
                                                interface_function_name, ...
                                                inputs, ...
                                                outputs, ...
                                                method_name, ...
                                                inputs);
        writeInterfaceFile(interface_function_file, interface_function_content);

    end

end

function writeInterfaceFile(file_name, file_content)

    % Open the file
    [file_id, error_msg] = fopen(file_name, 'w');

    if file_id < 0
        error(error_msg);
    end

    % Write the file
    try
        nbytes = fprintf(file_id, "%s", file_content);
        if nbytes == 0
            error("No bytes were written to the file ""%s"": %s", file_name, ferror(file_id));
        end
        fclose(file_id);
    catch ME
        fclose(file_id);
        rethrow(ME);
    end

end